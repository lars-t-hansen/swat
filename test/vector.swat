;;; -*- mode: scheme -*-

(defmodule Vec

  (defun+ (v_is_anyref (v (Vector i32)) -> i32)
    (is anyref v))
  
  (defun+ (v_as_anyref (v (Vector i32)) -> anyref)
    (as anyref v))
  
  (defun+ (anyref_is_v (x anyref) -> i32)
    (is (Vector i32) x))
  
  (defun+ (anyref_as_v (x anyref) -> (Vector i32))
    (as (Vector i32) x))
  
  (defun+ (make (n i32) -> (Vector i32))
    (new (Vector i32) n 5))

  (defun+ (make2 (n i32) -> (Vector f64))
    (new (Vector f64) n 1.0))

  (defun+ (sum (v (Vector i32)) -> i32)
    (let ((s 0)
	  (n (vector-length v)))
      (while (> n 0)
	(dec! n)
	(set! s (+ s (vector-ref v n))))
      s))

  (defun+ (nullvec -> (Vector i32))
    (null (Vector i32)))

  (defun+ (isNull (a (Vector i32)) -> i32)
    (null? a))
  
  (defun+ (get (v (Vector i32)) (n i32) -> i32)
    (vector-ref v n))

  (defun+ (set (v (Vector i32)) (n i32) (x i32))
    (vector-set! v n x))

  )

(js "
Vec.compile().then(function(module) {
  var ins = new WebAssembly.Instance(module, {lib:Vec.lib}).exports;
  var v = ins.make(7);
  assertEq(v instanceof Array, true);	// hack, we should not know this
  assertEq(v.length, 7);                  // ditto?
  assertEq(ins.sum(v), 35);
  assertEq(ins.nullvec(), null);
  assertEq(ins.isNull(ins.nullvec()), 1);
  assertEq(ins.anyref_is_v(v), true);
  assertEq(ins.anyref_as_v(v), v);
  var w = ins.make2(3);
  assertEq(ins.anyref_is_v(w), false);
  assertEq(ins.get(v, 3), 5);
  ins.set(v, 3, 8);
  assertEq(ins.get(v, 3), 8);
  assertError(() => ins.get(v, -1), RangeError, /out of range/);
  assertError(() => ins.get(v, 8), RangeError, /out of range/);
  assertError(() => ins.set(v, -1, 0), RangeError, /out of range/);
  assertError(() => ins.set(v, 8, 0), RangeError, /out of range/);
},
function(err) { throw err })

function assertError(thunk, Exn, msg) {
  var err = null;
  try { thunk() } catch (e) { err = e }
  assertEq(err !== null, true);
  assertEq(err instanceof Exn, true);
  assertEq(msg.exec(String(err)) !== null, true);
}
")
